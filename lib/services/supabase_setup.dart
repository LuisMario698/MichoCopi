import 'package:supabase_flutter/supabase_flutter.dart';

class SupabaseSetup {
  // Configuraci√≥n de Supabase
  static const String _supabaseUrl = 'https://dwruaswwduegczsgelia.supabase.co';
  static const String _supabaseAnonKey =
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR3cnVhc3d3ZHVlZ2N6c2dlbGlhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NTUxMTMsImV4cCI6MjA2MjEzMTExM30.OtewBCBvXSIHHJZth4CZxHZ92PF8FBfg0IEB0PKXg4c';

  /// Inicializa la conexi√≥n con Supabase
  static Future<void> initialize() async {
    await Supabase.initialize(
      url: _supabaseUrl,
      anonKey: _supabaseAnonKey,
      debug: true, // Cambia a false en producci√≥n
    );
  }

  /// Obtiene el cliente de Supabase
  static SupabaseClient get client => Supabase.instance.client;

  /// Verifica si Supabase est√° inicializado
  static bool get isInitialized {
    try {
      // Verifica si el cliente est√° disponible haciendo una consulta simple
      Supabase.instance.client.auth;
      return true;
    } catch (e) {
      return false;
    }
  }

  /// Obtiene la URL de Supabase
  static String get url => _supabaseUrl;

  /// Prueba la conexi√≥n con Supabase
  static Future<Map<String, dynamic>> testConnection() async {
    try {
      // Intenta hacer una consulta simple para verificar la conexi√≥n
      await client
          .from('Productos')
          .select('id')
          .limit(1)
          .timeout(const Duration(seconds: 5));
      
      return {
        'success': true,
        'message': 'Conexi√≥n exitosa a Supabase',
        'details': 'Base de datos accesible'
      };
    } catch (e) {
      // Si falla la primera consulta, intenta una funci√≥n m√°s simple
      try {
        await client
            .rpc('version')
            .timeout(const Duration(seconds: 3));
        
        return {
          'success': true,
          'message': 'Conexi√≥n parcial a Supabase',
          'details': 'Servidor accesible pero pueden haber problemas con las tablas'
        };
      } catch (e2) {
        // Analizar el tipo de error espec√≠ficamente
        String errorMessage = 'Error de conexi√≥n desconocido';
        String errorDetails = e2.toString();
        String errorCode = 'UNKNOWN';
        
        if (errorDetails.contains('SocketException')) {
          if (errorDetails.contains('Operation not permitted')) {
            errorMessage = 'Permisos de red bloqueados';
            errorDetails = 'macOS est√° bloqueando la conexi√≥n de red. Verifica los permisos de la aplicaci√≥n en Configuraci√≥n del Sistema > Privacidad y Seguridad > Firewall';
            errorCode = 'PERMISSION_DENIED';
          } else if (errorDetails.contains('Network is unreachable')) {
            errorMessage = 'Red no disponible';
            errorDetails = 'No hay conexi√≥n a internet disponible';
            errorCode = 'NETWORK_UNREACHABLE';
          } else {
            errorMessage = 'Error de conexi√≥n de red';
            errorDetails = 'Problema con la conexi√≥n de red. Verifica tu conexi√≥n a internet';
            errorCode = 'SOCKET_ERROR';
          }
        } else if (errorDetails.contains('TimeoutException')) {
          errorMessage = 'Tiempo de espera agotado';
          errorDetails = 'El servidor no responde en el tiempo esperado';
          errorCode = 'TIMEOUT';
        } else if (errorDetails.contains('HandshakeException')) {
          errorMessage = 'Error de certificado SSL';
          errorDetails = 'Problema con el certificado de seguridad del servidor';
          errorCode = 'SSL_ERROR';
        } else if (errorDetails.contains('FormatException')) {
          errorMessage = 'Respuesta inv√°lida del servidor';
          errorDetails = 'El servidor devolvi√≥ una respuesta mal formateada';
          errorCode = 'FORMAT_ERROR';
        }
        
        print('üî• Error detallado de conexi√≥n: $e2');
        print('üìä C√≥digo de error: $errorCode');
        
        return {
          'success': false,
          'message': errorMessage,
          'details': errorDetails,
          'error': e2.toString(),
          'errorCode': errorCode
        };
      }
    }
  }

  /// Intenta una conexi√≥n alternativa con diferentes configuraciones
  static Future<Map<String, dynamic>> attemptAlternativeConnection() async {
    print('üîÑ Intentando conexi√≥n alternativa...');
    
    try {
      // Intentar con timeout m√°s largo
      await client
          .from('Productos')
          .select('count')
          .limit(1)
          .timeout(const Duration(seconds: 15));
      
      return {
        'success': true,
        'message': 'Conexi√≥n exitosa con timeout extendido',
        'details': 'La conexi√≥n funciona pero puede ser lenta'
      };
    } catch (e) {
      print('‚ùå Conexi√≥n alternativa fall√≥: $e');
      
      // Intentar solo verificar si el servidor responde
      try {
        final uri = Uri.parse(_supabaseUrl);
        print('üåê Verificando acceso al dominio: ${uri.host}');
        
        return {
          'success': false,
          'message': 'Servidor Supabase no accesible',
          'details': 'El servidor de Supabase no est√° respondiendo. Esto puede ser un problema de red, firewall o el servicio puede estar temporalmente no disponible.',
          'errorCode': 'SERVER_UNREACHABLE'
        };
      } catch (e2) {
        return {
          'success': false,
          'message': 'Error cr√≠tico de red',
          'details': 'No se puede establecer ning√∫n tipo de conexi√≥n de red',
          'errorCode': 'CRITICAL_NETWORK_ERROR'
        };
      }
    }
  }

  /// Diagn√≥stico completo de conexi√≥n
  static Future<Map<String, dynamic>> fullConnectionDiagnostic() async {
    print('üîç Iniciando diagn√≥stico completo de conexi√≥n...');
    
    // Paso 1: Verificar conexi√≥n b√°sica
    final basicTest = await testConnection();
    if (basicTest['success']) {
      return basicTest;
    }
    
    print('‚ö†Ô∏è Conexi√≥n b√°sica fall√≥, intentando alternativas...');
    
    // Paso 2: Intentar conexi√≥n alternativa
    final alternativeTest = await attemptAlternativeConnection();
    
    // Paso 3: Crear reporte completo
    return {
      'success': false,
      'message': 'Diagn√≥stico de conexi√≥n completado',
      'basicTest': basicTest,
      'alternativeTest': alternativeTest,
      'recommendation': _getConnectionRecommendation(basicTest, alternativeTest),
      'offlineMode': true
    };
  }

  /// Obtiene recomendaciones basadas en los resultados del diagn√≥stico
  static String _getConnectionRecommendation(Map<String, dynamic> basicTest, Map<String, dynamic> alternativeTest) {
    final basicError = basicTest['errorCode'] ?? '';
    
    switch (basicError) {
      case 'PERMISSION_DENIED':
        return 'Verifica los permisos de red en Configuraci√≥n del Sistema > Privacidad y Seguridad > Firewall. Permite que la aplicaci√≥n acceda a la red.';
      case 'NETWORK_UNREACHABLE':
        return 'Verifica tu conexi√≥n a internet. Intenta acceder a otros sitios web para confirmar que internet funciona correctamente.';
      case 'TIMEOUT':
        return 'La conexi√≥n es muy lenta. Verifica la velocidad de tu internet o intenta conectarte a una red m√°s estable.';
      case 'SSL_ERROR':
        return 'Problema con certificados de seguridad. Esto puede ser un problema temporal del servidor o de tu configuraci√≥n de red.';
      default:
        return 'Error de conexi√≥n general. Verifica tu conexi√≥n a internet y los permisos de la aplicaci√≥n. Si el problema persiste, usa el modo offline.';
    }
  }

  /// Verifica si estamos en modo offline
  static Future<bool> isOfflineMode() async {
    final result = await testConnection();
    return !result['success'];
  }
}
