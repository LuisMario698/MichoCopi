-- Script SQL para crear las tablas de autenticación en Supabase
-- Sistema MichoCopi - Estructura actualizada de autenticación

-- =============================================================================
-- 1. CREAR TABLA TIPO_USUARIO
-- =============================================================================

CREATE TABLE IF NOT EXISTS public.tipo_usuario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion VARCHAR(200) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Índices para optimizar consultas
CREATE INDEX IF NOT EXISTS idx_tipo_usuario_nombre ON public.tipo_usuario(nombre);

-- =============================================================================
-- 2. CREAR TABLA USUARIOS
-- =============================================================================

CREATE TABLE IF NOT EXISTS public.usuarios (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    tipo BIGINT NOT NULL REFERENCES public.tipo_usuario(id) ON DELETE RESTRICT,
    fecha_creacion DATE DEFAULT CURRENT_DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Índices para optimizar consultas
CREATE INDEX IF NOT EXISTS idx_usuarios_nombre ON public.usuarios(nombre);
CREATE INDEX IF NOT EXISTS idx_usuarios_tipo ON public.usuarios(tipo);

-- =============================================================================
-- 3. INSERTAR TIPOS DE USUARIO BÁSICOS
-- =============================================================================

INSERT INTO public.tipo_usuario (nombre, descripcion) VALUES
    ('Administrador', 'Acceso completo al sistema, puede gestionar usuarios y configuraciones'),
    ('Usuario', 'Acceso estándar para operaciones cotidianas del inventario'),
    ('Empleado', 'Acceso limitado para tareas específicas de inventario')
ON CONFLICT (nombre) DO NOTHING;

-- =============================================================================
-- 4. POLÍTICAS DE SEGURIDAD RLS (Row Level Security)
-- =============================================================================

-- Habilitar RLS en ambas tablas
ALTER TABLE public.tipo_usuario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;

-- Política para tipo_usuario: Solo lectura para todos los usuarios autenticados
CREATE POLICY "Allow read access to tipo_usuario" ON public.tipo_usuario
    FOR SELECT
    USING (true);

-- Política para usuarios: Solo administradores pueden gestionar usuarios
CREATE POLICY "Allow admin users to manage usuarios" ON public.usuarios
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM public.usuarios u
            JOIN public.tipo_usuario tu ON u.tipo = tu.id
            WHERE u.id = auth.uid() AND tu.nombre = 'Administrador'
        )
    );

-- Política para usuarios: Los usuarios pueden ver su propia información
CREATE POLICY "Allow users to view own data" ON public.usuarios
    FOR SELECT
    USING (id = auth.uid());

-- =============================================================================
-- 5. FUNCIONES AUXILIARES
-- =============================================================================

-- Función para actualizar el campo updated_at automáticamente
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para actualizar updated_at
CREATE TRIGGER update_tipo_usuario_updated_at
    BEFORE UPDATE ON public.tipo_usuario
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER update_usuarios_updated_at
    BEFORE UPDATE ON public.usuarios
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- =============================================================================
-- 6. FUNCIÓN PARA VERIFICAR CREDENCIALES (PARA EL SERVICIO AUTH)
-- =============================================================================

CREATE OR REPLACE FUNCTION public.verificar_credenciales(
    p_nombre TEXT,
    p_password TEXT
)
RETURNS JSON AS $$
DECLARE
    usuario_record RECORD;
    tipo_record RECORD;
    result JSON;
BEGIN
    -- Buscar usuario por nombre
    SELECT u.*, tu.nombre as tipo_nombre, tu.descripcion as tipo_descripcion
    INTO usuario_record
    FROM public.usuarios u
    JOIN public.tipo_usuario tu ON u.tipo = tu.id
    WHERE u.nombre = p_nombre AND u.password = p_password;
    
    -- Si no se encuentra el usuario, retornar error
    IF usuario_record IS NULL THEN
        result := json_build_object(
            'success', false,
            'message', 'Credenciales inválidas'
        );
    ELSE
        -- Retornar información del usuario
        result := json_build_object(
            'success', true,
            'data', json_build_object(
                'id', usuario_record.id,
                'nombre', usuario_record.nombre,
                'tipo', usuario_record.tipo,
                'tipoNombre', usuario_record.tipo_nombre,
                'tipoDescripcion', usuario_record.tipo_descripcion,
                'fechaCreacion', usuario_record.fecha_creacion
            )
        );
    END IF;
    
    RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =============================================================================
-- 7. COMENTARIOS Y DOCUMENTACIÓN
-- =============================================================================

COMMENT ON TABLE public.tipo_usuario IS 'Tipos de usuario del sistema (Administrador, Usuario, Empleado)';
COMMENT ON TABLE public.usuarios IS 'Usuarios del sistema con autenticación por nombre y contraseña';

COMMENT ON COLUMN public.tipo_usuario.nombre IS 'Nombre único del tipo de usuario';
COMMENT ON COLUMN public.tipo_usuario.descripcion IS 'Descripción detallada de los permisos del tipo';

COMMENT ON COLUMN public.usuarios.nombre IS 'Nombre único del usuario para login';
COMMENT ON COLUMN public.usuarios.password IS 'Contraseña hasheada (SHA256)';
COMMENT ON COLUMN public.usuarios.tipo IS 'Referencia al tipo de usuario';
COMMENT ON COLUMN public.usuarios.fecha_creacion IS 'Fecha de creación del usuario';

-- =============================================================================
-- 8. INSERTAR USUARIO ADMINISTRADOR POR DEFECTO
-- =============================================================================

-- Insertar administrador por defecto (password: "admin123" hasheado con SHA256)
INSERT INTO public.usuarios (nombre, password, tipo) 
SELECT 
    'admin',
    'sha256$240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9', -- admin123
    tu.id
FROM public.tipo_usuario tu 
WHERE tu.nombre = 'Administrador'
ON CONFLICT (nombre) DO NOTHING;

-- =============================================================================
-- VERIFICACIÓN Y CONSULTAS DE PRUEBA
-- =============================================================================

-- Verificar que las tablas se crearon correctamente
SELECT 'tipo_usuario' as tabla, count(*) as registros FROM public.tipo_usuario
UNION ALL
SELECT 'usuarios' as tabla, count(*) as registros FROM public.usuarios;

-- Consulta para ver todos los tipos de usuario
-- SELECT * FROM public.tipo_usuario ORDER BY id;

-- Consulta para ver todos los usuarios con su tipo
-- SELECT u.id, u.nombre, u.fecha_creacion, tu.nombre as tipo 
-- FROM public.usuarios u 
-- JOIN public.tipo_usuario tu ON u.tipo = tu.id 
-- ORDER BY u.id;
